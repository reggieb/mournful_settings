= Mournful Settings

Adds a settings class to a rails app. The settings are mournful because
they can be stored encrypted. Aren't puns wonderful.

== Installation

    gem mournful_settings

Setting are stored in a database table 'mournful_settings_settings'. To add 
mournful_settings migrations to the host app run this rake task:

    rake mournful_settings:install:migrations

Then run 'rake db:migrate' to create the 'mournful_settings_settings' table

== Usage

In the host rails app, create a class you wish to use as the object to hold
settings, and have it inherit from MournfulSettings::Setting. For example
(/app/models/settings.rb)

    class Setting < MournfulSettings::Setting 
    end

=== Fields
Each setting has four fields:

[name]         Identifies the setting. Used in 'for' (see below)

[value]        The value being stored.

[value_type]   Values are stored as strings. value_type defines how that string 
               should be presented. For example, '1.23' with value_type 'number' 
               will be presented as numeric 1.23.

[description]  Information about the setting being stored

[encrypted]    Boolean: If set to true value will be stored in an encrypted format.
               Otherwise the setting will be stored as plain text. Note that
               encryption is fairly basic.

=== Retrieving a setting
 
To use a stored setting, use the 'for' class method:

    Setting.create(:name => 'pi', :value => '3.14159', :value_type => 'number')

    Setting.for(:pi)    -->   3.14159

