= Mournful Settings

Adds a settings class to a rails app. The settings are mournful because
they can be stored encrypted. Aren't puns wonderful.

== Installation

    gem mournful_settings

Setting are stored in a database table 'mournful_settings_settings'. To add 
mournful_settings migrations to the host app run this rake task:

    rake mournful_settings:install:migrations

Then run 'rake db:migrate' to create the 'mournful_settings_settings' table

== Usage

In the host rails app, create a class you wish to use as the object to hold
settings, and have it inherit from MournfulSettings::Setting. For example
(/app/models/settings.rb)

    class Setting < MournfulSettings::Setting 
    end

=== Fields
Each setting has five fields:

[name]         Identifies the setting. Used in 'for' (see below)

[value]        The value being stored.

[value_type]   Values are stored as strings. value_type defines how that string 
               should be presented. For example, '1.23' with value_type 'number' 
               will be presented as numeric 1.23. If the value_type was 'text'
               the value returned would be '1.23'.

[description]  Information about the setting being stored

[encrypted]    Boolean: If set to true, the value will be stored in an encrypted 
               format. Otherwise the value will be stored as plain text.

=== Retrieving a setting
 
To use a stored setting, use the 'for' class method:

    Setting.create(:name => 'pi', :value => '3.14159', :value_type => 'number')

    Setting.for(:pi)    -->   3.14159

== Encryption

By default mournful settings are encrypted. You can choose not to encrypt a
setting, by setting :encrypted => false. 

    Setting.create(
      :name => 'pi', 
      :value => '3.14159', 
      :value_type => 'number',
      :encrypted => false
    )

Out of the box, encryption uses a blowfish cipher, and a generic key string.

=== Set key

If you wish to use your own encryption key, you can define the key in
an initializer, like this:

    Setting::Cipher.key = 'your key'

=== Change cipher

Mournful settings uses Ruby's OpenSSL::Cipher. If you wish to change
the cipher from blowfish, you can alter it like this:

    Setting::Cipher.config = 'aes-128-cbc'

Note that existing encrypted settings will be decrypted with the previous cipher
and then encrypted with the new cipher when this setting is changed. 

To see a list of the available options use:

    puts OpenSSL::Cipher.ciphers

See: http://ruby-doc.org/stdlib-1.9.3/libdoc/openssl/rdoc/OpenSSL/Cipher.html

== Integration with ActiveAdmin

Mournful settings contains a ActiveAdmin register file, that allow settings to 
be managed from within the parent app's active_admin space. Of course
ActiveAdmin needs to be installed and working in the parent rails application,
for this to work.

To use the Mournful settings' ActiveAdmin register files, add this to the 
active_admin initializer in your application.

    config.load_paths << MournfulSettings.active_admin_load_path

Alternatively, copy lib/active_admin/admin/setting.rb to you app/admin within
the host rails app, and modify it as you desire.

